const vscode = require('vscode');
const path = require('path');
const fs = require('fs').promises;
const os = require('os');

// –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å—Å—è –∫–∞–∫ –º–∞–∫—Ä–æ—Å—ã
const reservedKeywords = ['if', 'for', 'while', 'switch', 'do', 'else'];

// –°–ø–∏—Å–æ–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è –±–∏–Ω–∞—Ä–Ω—ã–º–∏ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
const binaryExtensions = ['.png', '.jpg', '.jpeg', '.gif', '.bmp'];

async function findMacroInFile(filePath, macroName, visitedFiles = new Set()) {
    if (visitedFiles.has(filePath)) {
        return null; // –ò–∑–±–µ–≥–∞–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –≤–∫–ª—é—á–µ–Ω–∏–π
    }
    visitedFiles.add(filePath);

    try {
        const fileContent = await fs.readFile(filePath, 'utf8');
        // –£—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Ä–æ—Å—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: macro –∏–º—è (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã?) {
        const macroRegex = new RegExp(`macro\\s+${macroName}\\s*\\([^)]*\\)\\s*{`, 'm');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
        if (macroRegex.test(fileContent)) {
            const match = fileContent.match(macroRegex);
            const line = fileContent.substr(0, match.index).split('\n').length - 1;
            return { filePath, line };
        }

        // –ò—â–µ–º –≤—Å–µ include-–¥–∏—Ä–µ–∫—Ç–∏–≤—ã
        // –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        const includeRegex = /include\s+"((?:[^"\\]|\\.)+)"/g;
        const includes = [];
        let match;
        while ((match = includeRegex.exec(fileContent)) !== null) {
            // –£–¥–∞–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –ø—É—Ç–∏
            const includePath = match[1].replace(/\\(.)/g, '$1');
            includes.push(includePath);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π include —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        for (const includePath of includes) {
            const absolutePath = path.resolve(path.dirname(filePath), includePath);
            const result = await findMacroInFile(absolutePath, macroName, visitedFiles);
            if (result) {
                return result;
            }
        }
    } catch (err) {
        console.error(`Error reading file ${filePath}:`, err);
    }

    return null;
}

async function findImagePathInFile(filePath, imageName, visitedFiles = new Set()) {
    if (visitedFiles.has(filePath)) {
        return null;
    }
    visitedFiles.add(filePath);

    try {
        const fileContent = await fs.readFile(filePath, 'utf8');

        if (path.basename(filePath) === 'images.testo') {
            const escapedImageName = imageName.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            const paramRegex = new RegExp(`param\\s+${escapedImageName}\\s+"([^"]+)"`, 'i');
            const match = fileContent.match(paramRegex);
            if (match) {
                let imagePath = match[1];
                const who = os.userInfo().username;
                if (!who) {
                    vscode.window.showErrorMessage(`Could not determine username for image "${imageName}"`);
                    return null;
                }
                imagePath = imagePath.replace('${WHO}', who);
                return imagePath;
            }
        }

        const includeRegex = /include\s+"((?:[^"\\]|\\.)+)"/g;
        const includes = [];
        let match;
        while ((match = includeRegex.exec(fileContent)) !== null) {
            const includePath = match[1].replace(/\\(.)/g, '$1');
            includes.push(includePath);
        }

        for (const includePath of includes) {
            const absolutePath = path.resolve(path.dirname(filePath), includePath);
            const result = await findImagePathInFile(absolutePath, imageName, visitedFiles);
            if (result) {
                return result;
            }
        }
    } catch (err) {
        // –û—à–∏–±–∫–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    }

    return null;
}

class TestoDefinitionProvider {
    async provideDefinition(document, position, token) {
        const line = document.lineAt(position.line).text;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ include
        const includeRegex = /include\s+"((?:[^"\\]|\\.)+)"/;
        const includeMatch = line.match(includeRegex);
        if (includeMatch) {
            // –£–¥–∞–ª—è–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –ø—É—Ç–∏
            const includePath = includeMatch[1].replace(/\\(.)/g, '$1');
            const absolutePath = path.resolve(path.dirname(document.uri.fsPath), includePath);
            try {
                await fs.access(absolutePath);
                return new vscode.Location(
                    vscode.Uri.file(absolutePath),
                    new vscode.Position(0, 0)
                );
            } catch (err) {
                console.error(`Error accessing file ${absolutePath}:`, err);
                return null;
            }
        }

        // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å "macro"
        if (line.trim().startsWith('macro')) {
            return null;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ img "${}" –∏–ª–∏ find_img("${}")
        const wordRange = document.getWordRangeAtPosition(position, /(?:img\s*"\${[^}]*}"|find_img\s*\("\${[^}]*}"\))/);
        if (wordRange) {
            const selectedText = document.getText(wordRange);
            const imageMatch = selectedText.match(/(?:img\s*"\${([^}]+)}"|find_img\s*\("\${([^}]+)}"\))/);
            if (imageMatch) {
                const imageName = imageMatch[1] || imageMatch[2];
                const imagePath = await findImagePathInFile(document.uri.fsPath, imageName, new Set());
                if (imagePath) {
                    try {
                        await fs.access(imagePath);
                        return new vscode.Location(
                            vscode.Uri.file(imagePath),
                            new vscode.Position(0, 0)
                        );
                    } catch (err) {
                        vscode.window.showErrorMessage(`Cannot access file: ${imagePath}`);
                        return null;
                    }
                }
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –º–∞–∫—Ä–æ—Å–∞
        const macroRange = document.getWordRangeAtPosition(position, /[a-zA-Z_][a-zA-Z0-9_]*(?:\s*\()/);
        if (macroRange) {
            const selectedText = document.getText(macroRange);
            const macroName = selectedText.replace(/\s*\($/, '');
            if (!macroName || reservedKeywords.includes(macroName)) {
                return null; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            }

            // –ò—â–µ–º –º–∞–∫—Ä–æ—Å
            const result = await findMacroInFile(document.uri.fsPath, macroName, new Set());
            if (result) {
                return new vscode.Location(
                    vscode.Uri.file(result.filePath),
                    new vscode.Position(result.line, 0)
                );
            }
        }

        return null;
    }
}

class TestoHoverProvider {
    async provideHover(document, position, token) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        const config = vscode.workspace.getConfiguration('testoHelper');
        const isHoverEnabled = config.get('enableHover', true);
        if (!isHoverEnabled) {
            return null; // –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
        }

        // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è img "${}" –∏–ª–∏ find_img("${}")
        const wordRange = document.getWordRangeAtPosition(position, /(?:img\s*"\${[^}]*}"|find_img\s*\("\${[^}]*}"\))/);
        if (!wordRange) return null;

        const selectedText = document.getText(wordRange);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å img "${}" –∏–ª–∏ find_img("${}")
        const imageMatch = selectedText.match(/(?:img\s*"\${([^}]+)}"|find_img\s*\("\${([^}]+)}"\))/);

        if (imageMatch) {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–≤–æ–π –∏–ª–∏ –≤—Ç–æ—Ä–æ–π –≥—Ä—É–ø–ø—ã –∑–∞—Ö–≤–∞—Ç–∞
            const imageName = imageMatch[1] || imageMatch[2];
            const imagePath = await findImagePathInFile(document.uri.fsPath, imageName, new Set());

            if (imagePath) {
                const ext = path.extname(imagePath).toLowerCase();
                if (binaryExtensions.includes(ext)) {
                    try {
                        // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–æ–¥–∏—Ä—É–µ–º –≤ base64
                        const imageBuffer = await fs.readFile(imagePath);
                        const base64Image = imageBuffer.toString('base64');
                        const mimeType = ext === '.png' ? 'image/png' : 'image/jpeg'; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME-—Ç–∏–ø
                        const dataUri = `data:${mimeType};base64,${base64Image}`;

                        return new vscode.Hover(
                            new vscode.MarkdownString([
                                `![Preview](${dataUri})`
                            ].join('\n\n'))
                        );
                    } catch (err) {
                        return new vscode.Hover(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${imagePath}`);
                    }
                } else {
                    return new vscode.Hover(`üìÑ –§–∞–π–ª: ${imageName}\n\n–ü—É—Ç—å: ${imagePath}`);
                }
            } else {
                return new vscode.Hover(`‚ùì –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ "${imageName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
            }
        }

        return null;
    }
}

function registerProviders(context) {
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Definition Provider (–ø—Ä–æ–≤–∞–π–¥–µ—Ä –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –¥–ª—è Ctrl+Click –∏ F12)
    let disposableDefinitionProvider = vscode.languages.registerDefinitionProvider(
        { scheme: 'file', pattern: '**/*.testo' },
        new TestoDefinitionProvider()
    );

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Hover Provider (–¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ img)
    let disposableHoverProvider = vscode.languages.registerHoverProvider(
        { scheme: 'file', pattern: '**/*.testo' },
        new TestoHoverProvider()
    );

    context.subscriptions.push(disposableDefinitionProvider, disposableHoverProvider);
}

module.exports = {
    registerProviders
};